---
layout: post
title:  "Linux containers, cgroups and namespaces "
date:   2016-02-23 15:28:23
categories: jekyll update
published: no
summary: "Some notes on the \"bare-metal\" operation of Linux container, focusing
on lxc and on the underlying Linux internal mechanisms, such as cgroups and
namespaces."

---


Setup of the machine
=======
All the steps below refer to a host system running Linux Debian 8.2.
*lxc* package is required to operate Linux containers in userspace.
This will install lxc templates under /usr/share/lxc/templates, which are
basically shell scripts that build the rootfs that will be mounted by the
container itself.


Creation of the container
=======
*lxc-debian* template allows to create a Debian container. This uses
*debootstrap* to to create a Debian based roots, which will be located in 
*/var/lib/lxc/\<CONTAINER-NAME\>/rootfs*.

```
sudo lxc-create -n DebianTestContainer -t /usr/share/lxc/templates/lxc-debian
```

The container can be started with *lxc-start*.

```
sudo lxc-start -d -n DebianTestContainer
```

This will start the container in background. With *lxc-debian* template, a getty 
is spawned on tty{1..4} and *lxc-console* can be used to connect to any of those
terminals with -t option (0 is the console, any other number is a tty).

```
sudo lxc-console -n DebianTestContainer -t 1

Connected to tty 1
Type <Ctrl+a q> to exit the console, <Ctrl+a Ctrl+a> to enter Ctrl+a itself

Debian GNU/Linux 8 DebianTestContainer tty1

DebianTestContainer login:
```

The newly created container is endowed only with a loopback interface. The network
subsystem can be customized at creation time with a configuration file deployed under
*/var/lib/lxc/\<CONTAINER-NAME\>/config*.


Networking
=======
The newly created container is endowed only with a loopback interface. The network
subsystem can be customized at creation time with the configuration file deployed under
*/var/lib/lxc/<CONTAINER-NAME>/config* and it is normally based on bridges and 
virtual ethernet devices.

Linux bridges
=======
Linux bridges are exposed to userland as network devices whose job is to forward
traffic between two or more networks at Layer 2, i.e. based on hardware addresses (just
like a switch). Forwarding decisions are taken based on a table of MAC addresses 
that is filled in after discovering which host is connected to which network. 
Under Debian, bridges can be set up in several different ways:

* Via */etc/network/interfaces*
* Using *ip* command from iproute2
* Using *brctl* command (deprecated)

Considering only the second approach, the following commands can be used to 
create a bridge and add a physical interface, eth0.

```
$ sudo pkill dhclient
$ sudo ip link set eth0 down
$ sudo ip link add name br0 type bridge
$ sudo ip link set br0 up
$ sudo ip link set eth0 up
$ sudo ip link set eth0 master br0
$ sudo dhclient br0
```

*bridge link* shows the existing bridges and associated interfaces, while 
*ip link del br0* removes the bridge. *br0* now appears among the network
interfaces, with a layer 2 address which is a clone of the lowest MAC address
among to the interfaces associated with the bridge.

```
7: br0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default 
    link/ether 3c:97:0e:6e:e1:54 brd ff:ff:ff:ff:ff:ff
```
 
After running dhclient, br0 should now be the entry point to all bridged 
networks. Physical interfaces do not need an IP anymore, as long as traffic is not
routed through them directly.  *brctl* allows to list all the MACs that have been 
discovered by the bridge together with the port on which they have been discovered.

```
$ ip route
default via 192.168.0.1 dev br0 
192.168.0.0/24 dev br0  proto kernel  scope link  src 192.168.0.7 
```
*br0* is now the entry point to all bridged networks. *brctl*
allows to list all the MACs that have been discovered by the bridge together
with the port on which they have been discovered.

```
$ sudo brctl showmacs br0
port no mac addr        is local?   ageing timer
  1 00:26:5a:24:e7:45   no         1.87
  1 1c:56:fe:07:8e:e3   no        98.16
  1 3c:97:0e:6e:e1:54   yes        0.00
  1 68:a3:c4:85:7b:95   no        48.28
  1 fc:c8:97:b7:a2:74   no         0.54
```

Port 1 is indeed the subnet reachable via *eth0*:

```
$ sudo brctl showstp br0
br0
[...]
eth0 (1)
[...]
```

